package com.tradingview.tradingviewapp.feature.profile.impl.interactor;

import com.tradingview.tradingviewapp.ast.parser.impl.AstConstants;
import com.tradingview.tradingviewapp.core.base.model.auth.AuthState;
import com.tradingview.tradingviewapp.feature.profile.api.interactor.UserStateInteractor;
import com.tradingview.tradingviewapp.feature.profile.api.service.ProfileService;
import com.tradingview.tradingviewapp.feature.profile.model.user.CurrentUser;
import com.tradingview.tradingviewapp.gopro.model.plan.Plan;
import com.tradingview.tradingviewapp.gopro.model.plan.ProPlanLevel;
import com.tradingview.tradingviewapp.lib.urls.SymbolLogoUrlProvider;
import kotlin.Metadata;
import kotlin.NoWhenBranchMatchedException;
import kotlin.Unit;
import kotlin.jvm.functions.Function1;
import kotlin.jvm.internal.Intrinsics;
import timber.log.Timber;

@Metadata(m790d1 = {"\u0000J\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\u0002\n\u0000\n\u0002\u0010\t\n\u0000\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0002\b\u0002\n\u0002\u0010\u000e\n\u0002\b\u0002\u0018\u00002\u00020\u0001B\r\u0012\u0006\u0010\u0002\u001a\u00020\u0003¢\u0006\u0002\u0010\u0004J\b\u0010\u0005\u001a\u00020\u0006H\u0016J\b\u0010\u0007\u001a\u00020\bH\u0016J\n\u0010\t\u001a\u0004\u0018\u00010\nH\u0016J\n\u0010\u000b\u001a\u0004\u0018\u00010\fH\u0016J3\u0010\r\u001a\u00020\u000e2\u0006\u0010\u000f\u001a\u00020\u00102!\u0010\u0011\u001a\u001d\u0012\u0013\u0012\u00110\u0006¢\u0006\f\b\u0013\u0012\b\b\u0014\u0012\u0004\b\b(\r\u0012\u0004\u0012\u00020\u000e0\u0012H\u0016J\u0010\u0010\r\u001a\u00020\u00062\u0006\u0010\u0015\u001a\u00020\u0016H\u0016J\b\u0010\u0017\u001a\u00020\u0006H\u0016R\u000e\u0010\u0002\u001a\u00020\u0003X\u0082\u0004¢\u0006\u0002\n\u0000¨\u0006\u0018"}, m791d2 = {"Lcom/tradingview/tradingviewapp/feature/profile/impl/interactor/UserStateInteractorImpl;", "Lcom/tradingview/tradingviewapp/feature/profile/api/interactor/UserStateInteractor;", "profileService", "Lcom/tradingview/tradingviewapp/feature/profile/api/service/ProfileService;", "(Lcom/tradingview/tradingviewapp/feature/profile/api/service/ProfileService;)V", "doesUserHaveProPlan", "", "fetchAuthState", "Lcom/tradingview/tradingviewapp/core/base/model/auth/AuthState;", "getCurrentUser", "Lcom/tradingview/tradingviewapp/feature/profile/model/user/CurrentUser;", "getPlanLevel", "Lcom/tradingview/tradingviewapp/gopro/model/plan/ProPlanLevel;", "isCurrentUser", "", "userId", "", "result", "Lkotlin/Function1;", "Lkotlin/ParameterName;", "name", AstConstants.USERNAME, "", "isMerchantPlanIsOther", "impl_release"}, m792k = 1, m793mv = {1, 9, 0}, m795xi = SymbolLogoUrlProvider.SMALL_ICON_RESOLUTION)
/* loaded from: classes2.dex */
public final class UserStateInteractorImpl implements UserStateInteractor {
    private final ProfileService profileService;

    @Metadata(m792k = 3, m793mv = {1, 9, 0}, m795xi = SymbolLogoUrlProvider.SMALL_ICON_RESOLUTION)
    /* loaded from: classes5.dex */
    public /* synthetic */ class WhenMappings {
        public static final /* synthetic */ int[] $EnumSwitchMapping$0;

        static {
            int[] iArr = new int[AuthState.values().length];
            try {
                iArr[AuthState.AUTHORIZED.ordinal()] = 1;
            } catch (NoSuchFieldError unused) {
            }
            try {
                iArr[AuthState.NOT_AUTHORIZED.ordinal()] = 2;
            } catch (NoSuchFieldError unused2) {
            }
            $EnumSwitchMapping$0 = iArr;
        }
    }

    public UserStateInteractorImpl(ProfileService profileService) {
        Intrinsics.checkNotNullParameter(profileService, "profileService");
        this.profileService = profileService;
    }

    @Override // com.tradingview.tradingviewapp.feature.profile.api.interactor.UserStateInteractor
    public AuthState fetchAuthState() {
        return this.profileService.fetchAuthState();
    }

    @Override // com.tradingview.tradingviewapp.feature.profile.api.interactor.UserStateInteractor
    public boolean isCurrentUser(String r4) {
        Intrinsics.checkNotNullParameter(r4, "username");
        int i = WhenMappings.$EnumSwitchMapping$0[this.profileService.fetchAuthState().ordinal()];
        if (i != 1) {
            if (i == 2) {
                return false;
            }
            throw new NoWhenBranchMatchedException();
        }
        String userNameOrNull = this.profileService.getUserNameOrNull();
        if (userNameOrNull != null) {
            return Intrinsics.areEqual(r4, userNameOrNull);
        }
        Timber.m873e(new IllegalStateException("Username of the current user can't be null"));
        return false;
    }

    @Override // com.tradingview.tradingviewapp.feature.profile.api.interactor.UserStateInteractor
    public void isCurrentUser(long userId, Function1<? super Boolean, Unit> result) {
        Intrinsics.checkNotNullParameter(result, "result");
        int i = WhenMappings.$EnumSwitchMapping$0[this.profileService.fetchAuthState().ordinal()];
        if (i == 1) {
            Long userId2 = this.profileService.getUserId();
            result.invoke(Boolean.valueOf(userId2 != null && userId == userId2.longValue()));
        } else {
            if (i != 2) {
                return;
            }
            result.invoke(Boolean.FALSE);
        }
    }

    @Override // com.tradingview.tradingviewapp.feature.profile.api.interactor.UserStateInteractor
    public boolean isMerchantPlanIsOther() {
        CurrentUser currentUser = this.profileService.getCurrentUser();
        if (currentUser != null) {
            return currentUser.hasNonGooglePlayMerchant();
        }
        return false;
    }

    @Override // com.tradingview.tradingviewapp.feature.profile.api.interactor.UserStateInteractor
    public boolean doesUserHaveProPlan() {
        Plan plan;
        CurrentUser currentUser = this.profileService.getCurrentUser();
        return (currentUser == null || (plan = currentUser.getPlan()) == null || !plan.isProPlan()) ? false : true;
    }

    @Override // com.tradingview.tradingviewapp.feature.profile.api.interactor.UserStateInteractor
    public CurrentUser getCurrentUser() {
        return this.profileService.getCurrentUser();
    }

    @Override // com.tradingview.tradingviewapp.feature.profile.api.interactor.UserStateInteractor
    public ProPlanLevel getPlanLevel() {
        Plan plan;
        CurrentUser currentUser = this.profileService.getCurrentUser();
        if (currentUser == null || (plan = currentUser.getPlan()) == null) {
            return null;
        }
        return plan.getPlanLevel();
    }
}

package com.tradingview.tradingviewapp.root.presenter;

import com.tradingview.paywalls.api.interactor.PaywallInteractor;
import com.tradingview.paywalls.api.router.PaywallRouterExtKt;
import com.tradingview.tradingviewapp.architecture.router.interaces.NavRouter;
import com.tradingview.tradingviewapp.core.base.model.Paywall;
import com.tradingview.tradingviewapp.core.base.model.PaywallInfo;
import com.tradingview.tradingviewapp.core.base.model.PaywallParams;
import com.tradingview.tradingviewapp.feature.profile.api.interactor.UserStateInteractor;
import com.tradingview.tradingviewapp.gopro.api.interactor.NativeGoProAvailabilityInteractor;
import com.tradingview.tradingviewapp.gopro.api.interactor.TrialPeriodInteractor;
import com.tradingview.tradingviewapp.lib.urls.SymbolLogoUrlProvider;
import kotlin.Metadata;
import kotlin.ResultKt;
import kotlin.Unit;
import kotlin.coroutines.Continuation;
import kotlin.coroutines.intrinsics.IntrinsicsKt;
import kotlin.coroutines.jvm.internal.DebugMetadata;
import kotlin.coroutines.jvm.internal.SuspendLambda;
import kotlin.jvm.functions.Function2;
import kotlinx.coroutines.CoroutineScope;

@Metadata(m790d1 = {"\u0000\n\n\u0000\n\u0002\u0010\u0002\n\u0002\u0018\u0002\u0010\u0000\u001a\u00020\u0001*\u00020\u0002H\u008a@"}, m791d2 = {"<anonymous>", "", "Lkotlinx/coroutines/CoroutineScope;"}, m792k = 3, m793mv = {1, 9, 0}, m795xi = SymbolLogoUrlProvider.SMALL_ICON_RESOLUTION)
@DebugMetadata(m800c = "com.tradingview.tradingviewapp.root.presenter.RootPresenter$showPaywall$1", m801f = "RootPresenter.kt", m802i = {}, m803l = {320}, m804m = "invokeSuspend", m805n = {}, m806s = {})
/* loaded from: classes6.dex */
final class RootPresenter$showPaywall$1 extends SuspendLambda implements Function2<CoroutineScope, Continuation<? super Unit>, Object> {
    final /* synthetic */ PaywallParams $params;
    final /* synthetic */ Paywall $paywall;
    final /* synthetic */ Paywall.Source $source;
    int label;
    final /* synthetic */ RootPresenter this$0;

    /* JADX WARN: 'super' call moved to the top of the method (can break code semantics) */
    RootPresenter$showPaywall$1(RootPresenter rootPresenter, Paywall paywall, PaywallParams paywallParams, Paywall.Source source, Continuation<? super RootPresenter$showPaywall$1> continuation) {
        super(2, continuation);
        this.this$0 = rootPresenter;
        this.$paywall = paywall;
        this.$params = paywallParams;
        this.$source = source;
    }

    @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
    public final Continuation<Unit> create(Object obj, Continuation<?> continuation) {
        return new RootPresenter$showPaywall$1(this.this$0, this.$paywall, this.$params, this.$source, continuation);
    }

    @Override // kotlin.jvm.functions.Function2
    public final Object invoke(CoroutineScope coroutineScope, Continuation<? super Unit> continuation) {
        return ((RootPresenter$showPaywall$1) create(coroutineScope, continuation)).invokeSuspend(Unit.INSTANCE);
    }

    @Override // kotlin.coroutines.jvm.internal.BaseContinuationImpl
    public final Object invokeSuspend(Object obj) {
        NativeGoProAvailabilityInteractor nativeGoProAvailabilityInteractor;
        Integer num;
        UserStateInteractor userStateInteractor;
        PaywallInteractor paywallInteractor;
        NavRouter navRouter;
        TrialPeriodInteractor trialPeriodInteractor;
        Object coroutine_suspended = IntrinsicsKt.getCOROUTINE_SUSPENDED();
        int i = this.label;
        if (i == 0) {
            ResultKt.throwOnFailure(obj);
            nativeGoProAvailabilityInteractor = this.this$0.goProAvailabilityInteractor;
            this.label = 1;
            obj = nativeGoProAvailabilityInteractor.isNativeGoProAvailable(this);
            if (obj == coroutine_suspended) {
                return coroutine_suspended;
            }
        } else {
            if (i != 1) {
                throw new IllegalStateException("call to 'resume' before 'invoke' with coroutine");
            }
            ResultKt.throwOnFailure(obj);
        }
        if (((Boolean) obj).booleanValue()) {
            trialPeriodInteractor = this.this$0.trialPeriodInteractor;
            num = trialPeriodInteractor.getDaysOfTrialIfAvailable();
        } else {
            num = null;
        }
        Integer num2 = num;
        userStateInteractor = this.this$0.userStateInteractor;
        PaywallInfo paywallInfo = new PaywallInfo(this.$paywall, this.$params, num2, userStateInteractor.getPlanLevel(), this.$source);
        paywallInteractor = this.this$0.paywallInteractor;
        paywallInteractor.putPendingPaywall(paywallInfo);
        navRouter = this.this$0.rootFragmentNavRouter;
        PaywallRouterExtKt.showVideoPaywall(navRouter);
        return Unit.INSTANCE;
    }
}

package com.tradingview.tradingviewapp.gopro.model.plan;

import com.tradingview.tradingviewapp.feature.analytics.api.snowplow.SnowPlowEventConst;
import com.tradingview.tradingviewapp.feature.news.model.NewsListConstants;
import com.tradingview.tradingviewapp.lib.urls.SymbolLogoUrlProvider;
import java.lang.annotation.Annotation;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import kotlin.Lazy;
import kotlin.LazyKt;
import kotlin.LazyThreadSafetyMode;
import kotlin.Metadata;
import kotlin.enums.EnumEntries;
import kotlin.enums.EnumEntriesKt;
import kotlin.jvm.functions.Function0;
import kotlin.jvm.internal.DefaultConstructorMarker;
import kotlin.jvm.internal.Lambda;
import kotlin.jvm.internal.SourceDebugExtension;
import kotlinx.serialization.KSerializer;
import kotlinx.serialization.Serializable;
import kotlinx.serialization.internal.EnumsKt;

@Metadata(m790d1 = {"\u0000\u0012\n\u0002\u0018\u0002\n\u0002\u0010\u0010\n\u0000\n\u0002\u0010\b\n\u0002\b\u000b\b\u0087\u0081\u0002\u0018\u0000 \r2\b\u0012\u0004\u0012\u00020\u00000\u0001:\u0001\rB\u000f\b\u0002\u0012\u0006\u0010\u0002\u001a\u00020\u0003¢\u0006\u0002\u0010\u0004J\u0006\u0010\u0007\u001a\u00020\u0000R\u0011\u0010\u0002\u001a\u00020\u0003¢\u0006\b\n\u0000\u001a\u0004\b\u0005\u0010\u0006j\u0002\b\bj\u0002\b\tj\u0002\b\nj\u0002\b\u000bj\u0002\b\f¨\u0006\u000e"}, m791d2 = {"Lcom/tradingview/tradingviewapp/gopro/model/plan/ProPlanLevel;", "", NewsListConstants.INDEX, "", "(Ljava/lang/String;II)V", "getIndex", "()I", "getNextLevel", "PRO_LITE", "PRO", "PRO_PLUS", "PRO_PREMIUM", "UNDEFINED", "Companion", "model_release"}, m792k = 1, m793mv = {1, 9, 0}, m795xi = SymbolLogoUrlProvider.SMALL_ICON_RESOLUTION)
@Serializable
@SourceDebugExtension({"SMAP\nProPlanLevel.kt\nKotlin\n*S Kotlin\n*F\n+ 1 ProPlanLevel.kt\ncom/tradingview/tradingviewapp/gopro/model/plan/ProPlanLevel\n+ 2 _Collections.kt\nkotlin/collections/CollectionsKt___CollectionsKt\n*L\n1#1,28:1\n288#2,2:29\n*S KotlinDebug\n*F\n+ 1 ProPlanLevel.kt\ncom/tradingview/tradingviewapp/gopro/model/plan/ProPlanLevel\n*L\n25#1:29,2\n*E\n"})
/* loaded from: classes6.dex */
public final class ProPlanLevel extends Enum<ProPlanLevel> {
    private static final /* synthetic */ EnumEntries $ENTRIES;
    private static final /* synthetic */ ProPlanLevel[] $VALUES;
    private static final Lazy<KSerializer> $cachedSerializer$delegate;

    /* renamed from: Companion, reason: from kotlin metadata */
    public static final Companion INSTANCE;
    private final int index;
    public static final ProPlanLevel PRO_LITE = new ProPlanLevel("PRO_LITE", 0, 0);
    public static final ProPlanLevel PRO = new ProPlanLevel("PRO", 1, 1);
    public static final ProPlanLevel PRO_PLUS = new ProPlanLevel("PRO_PLUS", 2, 2);
    public static final ProPlanLevel PRO_PREMIUM = new ProPlanLevel("PRO_PREMIUM", 3, 3);
    public static final ProPlanLevel UNDEFINED = new ProPlanLevel("UNDEFINED", 4, -1);

    private static final /* synthetic */ ProPlanLevel[] $values() {
        return new ProPlanLevel[]{PRO_LITE, PRO, PRO_PLUS, PRO_PREMIUM, UNDEFINED};
    }

    public static EnumEntries<ProPlanLevel> getEntries() {
        return $ENTRIES;
    }

    public static ProPlanLevel valueOf(String str) {
        return (ProPlanLevel) Enum.valueOf(ProPlanLevel.class, str);
    }

    public static ProPlanLevel[] values() {
        return (ProPlanLevel[]) $VALUES.clone();
    }

    private ProPlanLevel(String str, int i, int i2) {
        super(str, i);
        this.index = i2;
    }

    public final int getIndex() {
        return this.index;
    }

    static {
        ProPlanLevel[] $values = $values();
        $VALUES = $values;
        $ENTRIES = EnumEntriesKt.enumEntries($values);
        INSTANCE = new Companion(null);
        $cachedSerializer$delegate = LazyKt.lazy(LazyThreadSafetyMode.PUBLICATION, (Function0) Companion.C41461.INSTANCE);
    }

    @Metadata(m790d1 = {"\u0000\u001c\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0002\b\u0002\n\u0002\u0018\u0002\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010 \n\u0000\b\u0086\u0003\u0018\u00002\u00020\u0001B\u0007\b\u0002¢\u0006\u0002\u0010\u0002J\u000f\u0010\u0003\u001a\b\u0012\u0004\u0012\u00020\u00050\u0004HÆ\u0001J\f\u0010\u0006\u001a\b\u0012\u0004\u0012\u00020\u00050\u0007¨\u0006\b"}, m791d2 = {"Lcom/tradingview/tradingviewapp/gopro/model/plan/ProPlanLevel$Companion;", "", "()V", "serializer", "Lkotlinx/serialization/KSerializer;", "Lcom/tradingview/tradingviewapp/gopro/model/plan/ProPlanLevel;", "validValues", "", "model_release"}, m792k = 1, m793mv = {1, 9, 0}, m795xi = SymbolLogoUrlProvider.SMALL_ICON_RESOLUTION)
    @SourceDebugExtension({"SMAP\nProPlanLevel.kt\nKotlin\n*S Kotlin\n*F\n+ 1 ProPlanLevel.kt\ncom/tradingview/tradingviewapp/gopro/model/plan/ProPlanLevel$Companion\n+ 2 _Collections.kt\nkotlin/collections/CollectionsKt___CollectionsKt\n*L\n1#1,28:1\n766#2:29\n857#2,2:30\n*S KotlinDebug\n*F\n+ 1 ProPlanLevel.kt\ncom/tradingview/tradingviewapp/gopro/model/plan/ProPlanLevel$Companion\n*L\n19#1:29\n19#1:30,2\n*E\n"})
    public static final class Companion {
        public /* synthetic */ Companion(DefaultConstructorMarker defaultConstructorMarker) {
            this();
        }

        @Metadata(m792k = 3, m793mv = {1, 9, 0}, m795xi = SymbolLogoUrlProvider.SMALL_ICON_RESOLUTION)
        /* renamed from: com.tradingview.tradingviewapp.gopro.model.plan.ProPlanLevel$Companion$1 */
        static final class C41461 extends Lambda implements Function0<KSerializer> {
            public static final C41461 INSTANCE = ;

            C41461() {
            }

            @Override // kotlin.jvm.functions.Function0
            public final KSerializer invoke() {
                return EnumsKt.createAnnotatedEnumSerializer("com.tradingview.tradingviewapp.gopro.model.plan.ProPlanLevel", ProPlanLevel.values(), new String[]{SnowPlowEventConst.VALUE_PRO_LITE_PLAN, "pro", "pro_plus", "premium", null}, new Annotation[][]{null, null, null, null, null}, null);
            }
        }

        private Companion() {
        }

        private final /* synthetic */ KSerializer get$cachedSerializer() {
            return (KSerializer) ProPlanLevel.$cachedSerializer$delegate.getValue();
        }

        public final KSerializer serializer() {
            return get$cachedSerializer();
        }

        public final List<ProPlanLevel> validValues() {
            EnumEntries<ProPlanLevel> entries = ProPlanLevel.getEntries();
            ArrayList arrayList = new ArrayList();
            for (Object obj : entries) {
                if (((ProPlanLevel) obj) != ProPlanLevel.UNDEFINED) {
                    arrayList.add(obj);
                }
            }
            return arrayList;
        }
    }

    public final ProPlanLevel getNextLevel() {
        Object obj;
        int i = this.index;
        if (i == UNDEFINED.index) {
            return this;
        }
        int i2 = i + 1;
        Iterator<E> it2 = getEntries().iterator();
        while (true) {
            if (!it2.hasNext()) {
                obj = null;
                break;
            }
            obj = it2.next();
            if (((ProPlanLevel) obj).index == i2) {
                break;
            }
        }
        ProPlanLevel proPlanLevel = (ProPlanLevel) obj;
        return proPlanLevel == null ? this : proPlanLevel;
    }
}

package com.tradingview.tradingviewapp.core.base.model;

import com.tradingview.tradingviewapp.core.base.model.Paywall;
import com.tradingview.tradingviewapp.feature.analytics.api.snowplow.SnowPlowEventConst;
import com.tradingview.tradingviewapp.feature.symbol.search.impl.symbolsearch.module.list.Constants;
import com.tradingview.tradingviewapp.gopro.model.plan.ProPlanLevel;
import com.tradingview.tradingviewapp.lib.urls.SymbolLogoUrlProvider;
import kotlin.Metadata;
import kotlin.jvm.internal.Intrinsics;

@Metadata(m790d1 = {"\u00008\n\u0002\u0018\u0002\n\u0002\u0010\u0000\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0010\b\n\u0000\n\u0002\u0018\u0002\n\u0000\n\u0002\u0018\u0002\n\u0002\b\u0014\n\u0002\u0010\u000b\n\u0002\b\u0003\n\u0002\u0010\u000e\n\u0000\b\u0086\b\u0018\u00002\u00020\u0001B3\u0012\u0006\u0010\u0002\u001a\u00020\u0003\u0012\b\u0010\u0004\u001a\u0004\u0018\u00010\u0005\u0012\b\u0010\u0006\u001a\u0004\u0018\u00010\u0007\u0012\b\u0010\b\u001a\u0004\u0018\u00010\t\u0012\u0006\u0010\n\u001a\u00020\u000b¢\u0006\u0002\u0010\fJ\t\u0010\u0018\u001a\u00020\u0003HÆ\u0003J\u000b\u0010\u0019\u001a\u0004\u0018\u00010\u0005HÆ\u0003J\u0010\u0010\u001a\u001a\u0004\u0018\u00010\u0007HÆ\u0003¢\u0006\u0002\u0010\u0016J\u000b\u0010\u001b\u001a\u0004\u0018\u00010\tHÆ\u0003J\t\u0010\u001c\u001a\u00020\u000bHÆ\u0003JF\u0010\u001d\u001a\u00020\u00002\b\b\u0002\u0010\u0002\u001a\u00020\u00032\n\b\u0002\u0010\u0004\u001a\u0004\u0018\u00010\u00052\n\b\u0002\u0010\u0006\u001a\u0004\u0018\u00010\u00072\n\b\u0002\u0010\b\u001a\u0004\u0018\u00010\t2\b\b\u0002\u0010\n\u001a\u00020\u000bHÆ\u0001¢\u0006\u0002\u0010\u001eJ\u0013\u0010\u001f\u001a\u00020 2\b\u0010!\u001a\u0004\u0018\u00010\u0001HÖ\u0003J\t\u0010\"\u001a\u00020\u0007HÖ\u0001J\t\u0010#\u001a\u00020$HÖ\u0001R\u0013\u0010\u0004\u001a\u0004\u0018\u00010\u0005¢\u0006\b\n\u0000\u001a\u0004\b\r\u0010\u000eR\u0011\u0010\u0002\u001a\u00020\u0003¢\u0006\b\n\u0000\u001a\u0004\b\u000f\u0010\u0010R\u0013\u0010\b\u001a\u0004\u0018\u00010\t¢\u0006\b\n\u0000\u001a\u0004\b\u0011\u0010\u0012R\u0011\u0010\n\u001a\u00020\u000b¢\u0006\b\n\u0000\u001a\u0004\b\u0013\u0010\u0014R\u0015\u0010\u0006\u001a\u0004\u0018\u00010\u0007¢\u0006\n\n\u0002\u0010\u0017\u001a\u0004\b\u0015\u0010\u0016¨\u0006%"}, m791d2 = {"Lcom/tradingview/tradingviewapp/core/base/model/PaywallInfo;", "", SnowPlowEventConst.SOURCE_PAYWALL, "Lcom/tradingview/tradingviewapp/core/base/model/Paywall;", "params", "Lcom/tradingview/tradingviewapp/core/base/model/PaywallParams;", "trialDays", "", "proPlanLevel", "Lcom/tradingview/tradingviewapp/gopro/model/plan/ProPlanLevel;", "source", "Lcom/tradingview/tradingviewapp/core/base/model/Paywall$Source;", "(Lcom/tradingview/tradingviewapp/core/base/model/Paywall;Lcom/tradingview/tradingviewapp/core/base/model/PaywallParams;Ljava/lang/Integer;Lcom/tradingview/tradingviewapp/gopro/model/plan/ProPlanLevel;Lcom/tradingview/tradingviewapp/core/base/model/Paywall$Source;)V", "getParams", "()Lcom/tradingview/tradingviewapp/core/base/model/PaywallParams;", "getPaywall", "()Lcom/tradingview/tradingviewapp/core/base/model/Paywall;", "getProPlanLevel", "()Lcom/tradingview/tradingviewapp/gopro/model/plan/ProPlanLevel;", "getSource", "()Lcom/tradingview/tradingviewapp/core/base/model/Paywall$Source;", "getTrialDays", "()Ljava/lang/Integer;", "Ljava/lang/Integer;", "component1", "component2", "component3", "component4", "component5", "copy", "(Lcom/tradingview/tradingviewapp/core/base/model/Paywall;Lcom/tradingview/tradingviewapp/core/base/model/PaywallParams;Ljava/lang/Integer;Lcom/tradingview/tradingviewapp/gopro/model/plan/ProPlanLevel;Lcom/tradingview/tradingviewapp/core/base/model/Paywall$Source;)Lcom/tradingview/tradingviewapp/core/base/model/PaywallInfo;", "equals", "", "other", "hashCode", "toString", "", "core_base_release"}, m792k = 1, m793mv = {1, 9, 0}, m795xi = SymbolLogoUrlProvider.SMALL_ICON_RESOLUTION)
/* loaded from: classes5.dex */
public final /* data */ class PaywallInfo {
    private final PaywallParams params;
    private final Paywall paywall;
    private final ProPlanLevel proPlanLevel;
    private final Paywall.Source source;
    private final Integer trialDays;

    public static /* synthetic */ PaywallInfo copy$default(PaywallInfo paywallInfo, Paywall paywall, PaywallParams paywallParams, Integer num, ProPlanLevel proPlanLevel, Paywall.Source source, int i, Object obj) {
        if ((i & 1) != 0) {
            paywall = paywallInfo.paywall;
        }
        if ((i & 2) != 0) {
            paywallParams = paywallInfo.params;
        }
        PaywallParams paywallParams2 = paywallParams;
        if ((i & 4) != 0) {
            num = paywallInfo.trialDays;
        }
        Integer num2 = num;
        if ((i & 8) != 0) {
            proPlanLevel = paywallInfo.proPlanLevel;
        }
        ProPlanLevel proPlanLevel2 = proPlanLevel;
        if ((i & 16) != 0) {
            source = paywallInfo.source;
        }
        return paywallInfo.copy(paywall, paywallParams2, num2, proPlanLevel2, source);
    }

    /* renamed from: component1, reason: from getter */
    public final Paywall getPaywall() {
        return this.paywall;
    }

    /* renamed from: component2, reason: from getter */
    public final PaywallParams getParams() {
        return this.params;
    }

    /* renamed from: component3, reason: from getter */
    public final Integer getTrialDays() {
        return this.trialDays;
    }

    /* renamed from: component4, reason: from getter */
    public final ProPlanLevel getProPlanLevel() {
        return this.proPlanLevel;
    }

    /* renamed from: component5, reason: from getter */
    public final Paywall.Source getSource() {
        return this.source;
    }

    public final PaywallInfo copy(Paywall r8, PaywallParams params, Integer trialDays, ProPlanLevel proPlanLevel, Paywall.Source source) {
        Intrinsics.checkNotNullParameter(r8, "paywall");
        Intrinsics.checkNotNullParameter(source, "source");
        return new PaywallInfo(r8, params, trialDays, proPlanLevel, source);
    }

    public boolean equals(Object other) {
        if (this == other) {
            return true;
        }
        if (!(other instanceof PaywallInfo)) {
            return false;
        }
        PaywallInfo paywallInfo = (PaywallInfo) other;
        return Intrinsics.areEqual(this.paywall, paywallInfo.paywall) && Intrinsics.areEqual(this.params, paywallInfo.params) && Intrinsics.areEqual(this.trialDays, paywallInfo.trialDays) && this.proPlanLevel == paywallInfo.proPlanLevel && this.source == paywallInfo.source;
    }

    public int hashCode() {
        int hashCode = this.paywall.hashCode() * 31;
        PaywallParams paywallParams = this.params;
        int hashCode2 = (hashCode + (paywallParams == null ? 0 : paywallParams.hashCode())) * 31;
        Integer num = this.trialDays;
        int hashCode3 = (hashCode2 + (num == null ? 0 : num.hashCode())) * 31;
        ProPlanLevel proPlanLevel = this.proPlanLevel;
        return ((hashCode3 + (proPlanLevel != null ? proPlanLevel.hashCode() : 0)) * 31) + this.source.hashCode();
    }

    public String toString() {
        return "PaywallInfo(paywall=" + this.paywall + ", params=" + this.params + ", trialDays=" + this.trialDays + ", proPlanLevel=" + this.proPlanLevel + ", source=" + this.source + Constants.CLOSE_BRACE;
    }

    public PaywallInfo(Paywall paywall, PaywallParams paywallParams, Integer num, ProPlanLevel proPlanLevel, Paywall.Source source) {
        Intrinsics.checkNotNullParameter(paywall, "paywall");
        Intrinsics.checkNotNullParameter(source, "source");
        this.paywall = paywall;
        this.params = paywallParams;
        this.trialDays = num;
        this.proPlanLevel = proPlanLevel;
        this.source = source;
    }

    public final Paywall getPaywall() {
        return this.paywall;
    }

    public final PaywallParams getParams() {
        return this.params;
    }

    public final Integer getTrialDays() {
        return this.trialDays;
    }

    public final ProPlanLevel getProPlanLevel() {
        return this.proPlanLevel;
    }

    public final Paywall.Source getSource() {
        return this.source;
    }
}
