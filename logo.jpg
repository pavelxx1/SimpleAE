(function() {
    /**
     * Показывает уведомление в виде PNG изображения до первого клика.
     * @param {string} imageUrl URL изображения для отображения.
     * @param {object} [options] Дополнительные опции.
     * @param {string} [options.width='300px'] Ширина уведомления.
     * @param {string} [options.height='80px'] Высота уведомления.
     */
    function showNotificationImageUntilClick(imageUrl, options = {}) {
        if (!document.body) {
            console.error("Тег <body> не найден.");
            return;
        }

        const notification = document.createElement('div');
        const { width = '300px', height = '80px' } = options; // Размеры по умолчанию

        // --- Стили для блока уведомления ---
        const baseStyles = {
            position: 'fixed',
            bottom: '20px',
            left: '50%',
            transform: 'translateX(-50%)',
            width: width,   // Задаем ширину
            height: height, // Задаем высоту
            borderRadius: '15px', // Скругление углов (можно убрать, если у PNG свои)
            boxShadow: '0 3px 8px rgba(0, 0, 0, 0.25)', // Тень
            zIndex: '10001', // Поверх других элементов
            opacity: '0', // Начальная прозрачность для анимации
            transition: 'opacity 0.4s ease-in-out, bottom 0.4s ease-in-out', // Анимация
            cursor: 'default', // Стандартный курсор
            // --- Стили для отображения PNG как фона ---
            backgroundImage: `url('${imageUrl}')`, // Устанавливаем фон из URL
            backgroundSize: 'contain', // Масштабирует изображение, чтобы оно поместилось внутри элемента
            backgroundRepeat: 'no-repeat', // Не повторять изображение
            backgroundPosition: 'center', // Центрировать изображение
            backgroundColor: 'transparent' // Фон самого div прозрачный
            // Убраны стили текста, padding, border, mask и т.д.
        };

        // Применяем стили к div уведомления
        Object.assign(notification.style, baseStyles);

        // --- Логика скрытия уведомления при клике ---
        let isDismissing = false;
        const dismissNotification = () => {
            if (isDismissing) return;
            isDismissing = true;
            document.removeEventListener('click', dismissNotification, { capture: true });
            document.removeEventListener('touchstart', dismissNotification, { capture: true });
            notification.style.opacity = '0';
            notification.style.bottom = '10px';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
                // SVG больше нет, удалять не нужно
            }, 400);
        };

        // Добавляем уведомление в DOM
        document.body.appendChild(notification);
        // Запускаем анимацию появления
        setTimeout(() => {
            notification.style.opacity = '1';
            notification.style.bottom = '30px';
            document.addEventListener('click', dismissNotification, { once: true, capture: true });
            document.addEventListener('touchstart', dismissNotification, { once: true, capture: true });
        }, 50);
    }

    // --- Остальной код AdBlocker (можно оставить или убрать, он не влияет на показ картинки) ---
    let processedElements = new WeakSet();

    function scanForAds() {
        const selectors = [
            '[id*="google_ads"]', '[id*="div-gpt-ad"]', '[data-google-query-id]',
            'div[id="charting-ad"]', 'div[class*="toast-kckar"]',
            'button[title="Закрыть рекламу"]', 'div[class*="closeButtonWrapper"]'
        ];
        selectors.forEach(selector => {
            document.querySelectorAll(selector).forEach(element => {
                if (processedElements.has(element)) return;
                processedElements.add(element);
                const container = findAdContainer(element);
                if (container) {
                    container.style.display = 'none';
                }
            });
        });
    }

    function findAdContainer(element) {
        if (isAdContainer(element)) return element;
        let current = element.parentElement;
        let level = 0;
        while (current && level < 4) {
            if (isAdContainer(current)) return current;
            if (current.getAttribute('style')?.includes('height-padded')) return current;
            current = current.parentElement;
            level++;
        }
        return element;
    }

    function isAdContainer(element) {
        const id = element.id || '';
        const className = element.className || '';
        const dataName = element.getAttribute('data-name') || '';
        return /google_ads|div-gpt-ad|charting-ad/.test(id) ||
               /toastGroup.*charting-ad|toast-kckar/.test(className) ||
               /toast-group.*charting-ad/.test(dataName);
    }

    // Показываем уведомление-картинку при запуске скрипта
    setTimeout(() => {
        const imageUrl = 'https://i.ibb.co/WTDBbsR/t.png'; // Ваша ссылка на PNG
        // Можно задать другие размеры, если стандартные 300x80 не подходят
        showNotificationImageUntilClick(imageUrl, { width: '300px', height: '80px' });
    }, 1000);

    // Запуск сканирования рекламы
    setTimeout(scanForAds, 500);
    if (window.MutationObserver) {
        const observer = new MutationObserver(() => {
            requestAnimationFrame(scanForAds);
        });
        observer.observe(document.body || document.documentElement, {
            childList: true,
            subtree: true
        });
    } else {
        setInterval(scanForAds, 2000);
    }

})();
