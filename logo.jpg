(function() {
    function showNotificationUntilClick(message, type = 'info') {
        if (!document.body) return;

        const notification = document.createElement('div');
        notification.textContent = message.replace(/\\n/g, '\n');
        const baseStyles = {
            position: 'fixed',
            bottom: '20px',
            left: '50%',
            transform: 'translateX(-50%)',
            minWidth: '180px',
            maxWidth: '90%',
            padding: '12px 20px',
            // Цвет текста будет управляться маской или установлен как прозрачный
            borderRadius: '15px',
            boxShadow: '0 3px 8px rgba(0, 0, 0, 0.25)',
            zIndex: '10001',
            fontFamily: 'Roboto, Arial, sans-serif',
            fontSize: '15px',
            fontWeight: 'bold', // Жирный шрифт для лучшей видимости выреза
            lineHeight: '1.4',
            textAlign: 'center',
            whiteSpace: 'pre-wrap',
            opacity: '0',
            transition: 'opacity 0.4s ease-in-out, bottom 0.4s ease-in-out',
            cursor: 'default',
            border: '1px solid black' // Added black border
        };

        let backgroundColor = '#333';
        let textColor = 'white'; // Стандартный цвет текста

        switch (type) {
            case 'success':
                backgroundColor = '#28a745';
                break;
            case 'info':
                backgroundColor = '#2eaf17'; // Зеленый фон контейнера
                // Для эффекта вырезания цвет текста не важен, т.к. он будет маской
                break;
            case 'warning':
                backgroundColor = '#ffc107';
                textColor = '#333';
                break;
            case 'error':
                backgroundColor = '#dc3545';
                break;
        }

        // Применяем базовые стили
        Object.assign(notification.style, baseStyles);

        // Устанавливаем фон контейнера
        notification.style.backgroundColor = backgroundColor;

        // Сбрасываем свойства, которые могут помешать маске
        notification.style.backgroundImage = 'none';
        notification.style.webkitBackgroundClip = 'unset';
        notification.style.backgroundClip = 'unset';
        notification.style.webkitMaskImage = 'none';
        notification.style.maskImage = 'none';
        notification.style.webkitMaskClip = 'unset';
        notification.style.maskClip = 'unset';
        notification.style.webkitMaskComposite = 'source-over'; // Reset composite
        notification.style.maskComposite = 'add'; // Reset composite


        if (type === 'info') {
            // --- Применяем CSS Маску для эффекта вырезания ---

            // 1. Создаем маску: черный фон (непрозрачный)
            notification.style.webkitMaskImage = 'linear-gradient(black, black)';
            notification.style.maskImage = 'linear-gradient(black, black)';

            // 2. Обрезаем маску по форме текста
            // Текст становится "прозрачной" областью в маске
            notification.style.webkitMaskClip = 'text';
            notification.style.maskClip = 'text';

            // 3. Композиция маски: вычитаем текстовую область из основной маски
            // Это делает область текста полностью прозрачной в элементе
            notification.style.webkitMaskComposite = 'destination-out'; // Для WebKit (Chrome, Safari)
            notification.style.maskComposite = 'exclude'; // Стандартное свойство

            // 4. Делаем сам текст невидимым (прозрачным),
            // чтобы он не перекрывал "дырку", созданную маской.
            notification.style.color = 'transparent';

        } else {
            // Для других типов уведомлений используем стандартный цвет текста
            notification.style.color = textColor;
        }

        let isDismissing = false;
        const dismissNotification = () => {
            if (isDismissing) return;
            isDismissing = true;
            document.removeEventListener('click', dismissNotification, { capture: true });
            document.removeEventListener('touchstart', dismissNotification, { capture: true });
            notification.style.opacity = '0';
            notification.style.bottom = '10px';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 400);
        };

        document.body.appendChild(notification);
        setTimeout(() => {
            notification.style.opacity = '1';
            notification.style.bottom = '30px';
            document.addEventListener('click', dismissNotification, { once: true, capture: true });
            document.addEventListener('touchstart', dismissNotification, { once: true, capture: true });
        }, 50);
    }

    // --- Остальной код AdBlocker без изменений ---

    let processedElements = new WeakSet();

    function scanForAds() {
        const selectors = [
            '[id*="google_ads"]',
            '[id*="div-gpt-ad"]',
            '[data-google-query-id]',
            'div[id="charting-ad"]',
            'div[class*="toast-kckar"]',
            'button[title="Закрыть рекламу"]',
            'div[class*="closeButtonWrapper"]'
        ];

        selectors.forEach(selector => {
            document.querySelectorAll(selector).forEach(element => {
                if (processedElements.has(element)) return;
                processedElements.add(element);
                const container = findAdContainer(element);
                if (container) container.style.display = 'none';
            });
        });
    }

    function findAdContainer(element) {
        if (isAdContainer(element)) return element;
        let current = element.parentElement;
        let level = 0;
        while (current && level < 4) {
            if (isAdContainer(current)) return current;
            if (current.getAttribute('style')?.includes('height-padded')) {
                return current;
            }
            current = current.parentElement;
            level++;
        }
        return element;
    }

    function isAdContainer(element) {
        const id = element.id || '';
        const className = element.className || '';
        const dataName = element.getAttribute('data-name') || '';
        return /google_ads|div-gpt-ad|charting-ad/.test(id) ||
               /toastGroup.*charting-ad|toast-kckar/.test(className) ||
               /toast-group.*charting-ad/.test(dataName);
    }

    setTimeout(() => {
        // Вызываем уведомление типа 'info', чтобы увидеть эффект вырезания
        showNotificationUntilClick('AdBlocker v0.2\n@xrsrvd', 'info');
    }, 1000);

    setTimeout(scanForAds, 500);

    const observer = new MutationObserver(() => requestAnimationFrame(scanForAds));
    observer.observe(document.body, {
        childList: true,
        subtree: true,
        attributes: false,
        characterData: false
    });

    setInterval(scanForAds, 1000);
})();
