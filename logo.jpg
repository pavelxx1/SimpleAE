(function() {
    function showNotificationUntilClick(message, type = 'info') {
        if (!document.body) return;

        const notification = document.createElement('div');
        // Текст теперь будет в маске, а не в div
        const uniqueId = 'notify-mask-' + Math.random().toString(16).slice(2);

        // --- Стили для основного блока уведомления ---
        const baseStyles = {
            position: 'fixed',
            bottom: '20px',
            left: '50%',
            transform: 'translateX(-50%)',
            minWidth: '180px',
            maxWidth: '90%',
            padding: '12px 20px', // Оставляем padding для размера
            borderRadius: '15px',
            boxShadow: '0 3px 8px rgba(0, 0, 0, 0.25)',
            zIndex: '10001',
            fontFamily: 'Roboto, Arial, sans-serif', // Шрифт важен для SVG
            fontSize: '15px', // Размер важен для SVG
            lineHeight: '1.4', // Важно для расчета в SVG
            opacity: '0',
            transition: 'opacity 0.4s ease-in-out, bottom 0.4s ease-in-out',
            cursor: 'default',
            border: '1px solid black',
            // --- Применение маски ---
            mask: `url(#${uniqueId})`,
            WebkitMask: `url(#${uniqueId})` // Для Safari/Chrome
        };

        // --- Цвет фона ---
        let backgroundColor = '#2eaf17'; // Зеленый для info
        switch (type) {
            case 'success': backgroundColor = '#28a745'; break;
            case 'info':    backgroundColor = '#2eaf17'; break;
            case 'warning': backgroundColor = '#ffc107'; break;
            case 'error':   backgroundColor = '#dc3545'; break;
        }
        baseStyles.backgroundColor = backgroundColor; // Устанавливаем фон

        // Применяем стили к div
        Object.assign(notification.style, baseStyles);

        // --- Создание SVG и Маски ---
        const svgNS = "http://www.w3.org/2000/svg";
        const svg = document.createElementNS(svgNS, "svg");
        // SVG можно скрыть, он нужен только для определения маски
        svg.style.position = 'absolute';
        svg.style.width = '0';
        svg.style.height = '0';
        svg.style.overflow = 'hidden';

        const defs = document.createElementNS(svgNS, "defs");
        const mask = document.createElementNS(svgNS, "mask");
        mask.setAttribute("id", uniqueId);
        // Используем objectBoundingBox, чтобы координаты были относительны элемента (0 до 1)
        mask.setAttribute("maskUnits", "objectBoundingBox");
        mask.setAttribute("maskContentUnits", "objectBoundingBox");

        // 1. Белый прямоугольник (основа маски - всё видимо)
        const maskRect = document.createElementNS(svgNS, "rect");
        maskRect.setAttribute("x", "0");
        maskRect.setAttribute("y", "0");
        maskRect.setAttribute("width", "1"); // 100% ширины
        maskRect.setAttribute("height", "1"); // 100% высоты
        maskRect.setAttribute("fill", "white"); // Белый = показывать фон div
        mask.appendChild(maskRect);

        // 2. Черный текст (вырезает дырку в маске)
        const maskText = document.createElementNS(svgNS, "text");
        maskText.setAttribute("x", "0.5"); // Центр по горизонтали
        maskText.setAttribute("y", "0.5"); // Примерный центр по вертикали
        maskText.setAttribute("fill", "black"); // Черный = скрывать фон div (делать дырку)
        maskText.setAttribute("text-anchor", "middle"); // Горизонтальное выравнивание
        maskText.setAttribute("dominant-baseline", "central"); // Вертикальное выравнивание
        maskText.setAttribute("font-family", baseStyles.fontFamily);
        // --- ВАЖНО: Настройка размера шрифта относительно контейнера ---
        // Это значение (0.1) нужно будет подбирать экспериментально!
        // Оно означает ~10% от высоты уведомления.
        const relativeFontSize = 0.1;
        const relativeLineHeight = 0.12; // Тоже подбирать!
        maskText.setAttribute("font-size", relativeFontSize.toString());
        maskText.setAttribute("font-weight", "bold"); // Жирный текст лучше виден как дырка

        // Обработка переносов строк (\n) с помощью <tspan>
        const lines = message.replace(/\\n/g, '\n').split('\n');
        const totalLines = lines.length;
        // Начальная позиция Y для первой строки, чтобы центрировать блок текста
        const startY = 0.5 - (totalLines - 1) * relativeLineHeight / 2;

        lines.forEach((line, index) => {
            const tspan = document.createElementNS(svgNS, "tspan");
            tspan.setAttribute("x", "0.5"); // Каждую строку центрируем
            // Устанавливаем абсолютную позицию Y для каждой строки
            tspan.setAttribute("y", (startY + index * relativeLineHeight).toString());
            tspan.textContent = line || ' '; // Добавляем пробел для пустых строк, чтобы tspan не исчез
            maskText.appendChild(tspan);
        });

        mask.appendChild(maskText);
        defs.appendChild(mask);
        svg.appendChild(defs);

        // Добавляем SVG в DOM (он будет невидим)
        document.body.appendChild(svg);

        // --- Логика скрытия уведомления ---
        let isDismissing = false;
        const dismissNotification = () => {
            if (isDismissing) return;
            isDismissing = true;
            document.removeEventListener('click', dismissNotification, { capture: true });
            document.removeEventListener('touchstart', dismissNotification, { capture: true });
            notification.style.opacity = '0';
            notification.style.bottom = '10px';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
                // Удаляем SVG элемент после скрытия уведомления
                if (svg.parentNode) {
                    svg.parentNode.removeChild(svg);
                }
            }, 400);
        };

        // Добавляем уведомление в DOM и показываем
        document.body.appendChild(notification);
        setTimeout(() => {
            notification.style.opacity = '1';
            notification.style.bottom = '30px';
            document.addEventListener('click', dismissNotification, { once: true, capture: true });
            document.addEventListener('touchstart', dismissNotification, { once: true, capture: true });
        }, 50);
    }

    // --- Остальной код AdBlocker (без изменений) ---
    let processedElements = new WeakSet();
    function scanForAds() {
        const selectors = [
            '[id*="google_ads"]', '[id*="div-gpt-ad"]', '[data-google-query-id]',
            'div[id="charting-ad"]', 'div[class*="toast-kckar"]',
            'button[title="Закрыть рекламу"]', 'div[class*="closeButtonWrapper"]'
        ];
        selectors.forEach(selector => {
            document.querySelectorAll(selector).forEach(element => {
                if (processedElements.has(element)) return;
                processedElements.add(element);
                const container = findAdContainer(element);
                if (container) container.style.display = 'none';
            });
        });
    }
    function findAdContainer(element) {
        if (isAdContainer(element)) return element;
        let current = element.parentElement;
        let level = 0;
        while (current && level < 4) {
            if (isAdContainer(current)) return current;
            if (current.getAttribute('style')?.includes('height-padded')) return current;
            current = current.parentElement;
            level++;
        }
        return element;
    }
    function isAdContainer(element) {
        const id = element.id || '';
        const className = element.className || '';
        const dataName = element.getAttribute('data-name') || '';
        return /google_ads|div-gpt-ad|charting-ad/.test(id) ||
               /toastGroup.*charting-ad|toast-kckar/.test(className) ||
               /toast-group.*charting-ad/.test(dataName);
    }
    setTimeout(() => {
        showNotificationUntilClick('AdBlocker v0.2\n@xrsrvd', 'info');
    }, 1000);
    setTimeout(scanForAds, 500);
    const observer = new MutationObserver(() => requestAnimationFrame(scanForAds));
    observer.observe(document.body, { childList: true, subtree: true });
    setInterval(scanForAds, 1000);

})();
