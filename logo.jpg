// Содержимое файла adblockscript.js

(function() {

    /**
     * Функция для показа кастомного уведомления в стиле "тоста" с кнопкой закрытия.
     * @param {string} message - Текст сообщения.
     * @param {string} type - Тип уведомления ('success', 'info', 'warning', 'error').
     * @param {boolean} requireDismiss - Если true, не будет автоскрытия, нужна кнопка.
     */
    function showWebViewNotification(message, type = 'success', requireDismiss = true) { // По умолчанию требуем закрытия
        if (!document.body) {
            console.warn('[AdBlock Patch] document.body не найден, уведомление не показано.');
            return;
        }

        // --- Создание основного элемента (как раньше) ---
        const notification = document.createElement('div');
        notification.textContent = message.replace(/\\n/g, '\n');

        // --- Стили (как раньше, но добавим padding-right для кнопки) ---
        const baseStyles = {
            position: 'fixed',
            bottom: '20px',
            left: '50%',
            transform: 'translateX(-50%)',
            minWidth: '180px',
            maxWidth: '90%',
            padding: '12px 40px 12px 20px', // Добавили место справа для кнопки
            color: 'white',
            borderRadius: '25px',
            boxShadow: '0 3px 8px rgba(0, 0, 0, 0.25)',
            zIndex: '10001',
            fontFamily: 'Roboto, Arial, sans-serif',
            fontSize: '14px',
            lineHeight: '1.4',
            textAlign: 'center',
            whiteSpace: 'pre-wrap',
            opacity: '0',
            transition: 'opacity 0.4s ease-in-out, bottom 0.4s ease-in-out',
            // pointerEvents: 'none' // Убираем, т.к. кнопка должна быть кликабельной
        };

        // --- Стили по типу (как раньше) ---
        let backgroundColor = '#333';
        let color = 'white'; // Явно задаем цвет по умолчанию
        switch (type) {
            case 'success': backgroundColor = '#28a745'; break;
            case 'info':    backgroundColor = '#17a2b8'; break;
            case 'warning': backgroundColor = '#ffc107'; color = '#333'; break;
            case 'error':   backgroundColor = '#dc3545'; break;
        }
        baseStyles.backgroundColor = backgroundColor;
        baseStyles.color = color;

        Object.assign(notification.style, baseStyles);

        // --- Создание и добавление кнопки закрытия ---
        if (requireDismiss) {
            const closeButton = document.createElement('span'); // Используем span для простоты
            closeButton.innerHTML = '&times;'; // Символ "X" (крестик)
            Object.assign(closeButton.style, {
                position: 'absolute',
                top: '50%',
                right: '15px',
                transform: 'translateY(-50%)',
                fontSize: '20px',
                lineHeight: '1',
                cursor: 'pointer',
                fontWeight: 'bold',
                color: 'inherit' // Наследуем цвет текста от родителя
            });

            // Функция для закрытия уведомления
            const dismissNotification = () => {
                notification.style.opacity = '0';
                notification.style.bottom = '10px'; // Анимация исчезновения
                setTimeout(() => {
                    if (notification.parentNode) {
                        notification.parentNode.removeChild(notification);
                    }
                }, 400); // Должно совпадать с transition-duration
            };

            closeButton.addEventListener('click', dismissNotification);
            notification.appendChild(closeButton);
        }

        // --- Добавляем элемент на страницу ---
        document.body.appendChild(notification);

        // --- Анимация появления (как раньше) ---
        setTimeout(() => {
            notification.style.opacity = '1';
            notification.style.bottom = '30px';
        }, 50);

        // --- Убираем автоматическое скрытие, если requireDismiss === true ---
        if (!requireDismiss) {
            const duration = 5000; // Пример: автоскрытие через 5 секунд, если НЕ requireDismiss
            setTimeout(() => {
                 // Используем ту же логику закрытия, что и у кнопки
                 notification.style.opacity = '0';
                 notification.style.bottom = '10px';
                 setTimeout(() => {
                     if (notification.parentNode) {
                         notification.parentNode.removeChild(notification);
                     }
                 }, 400);
            }, duration);
        }
    }

    // --- Использование ---
    // Теперь уведомление будет висеть, пока его не закроют кнопкой "X"
    showWebViewNotification('Patch Activated v0.1b\n@xrsrvd', 'success', true);

    let lastFoundAd = null;
    function scanForAds() {
        const closeButtons = Array.from(document.querySelectorAll('div[class="closeButtonWrapper"]'));
        closeButtons.forEach(button => {
            if (button === lastFoundAd || button.hasAttribute('data-detected')) {
                return;
            }
            button.setAttribute('data-detected', 'true');
            lastFoundAd = button;
            let adContainer = button;
            for (let i = 0; i < 3; i++) {
                if (adContainer.parentElement) {
                    adContainer = adContainer.parentElement;
                } else {
                    break;
                }
            }

            // Уведомление о скрытии можно сделать автоскрываемым, т.к. оно менее критично
            // showWebViewNotification('Реклама скрыта!', 'info', false); // false - автоскрытие через 5 сек

            adContainer.style.display = 'none';
            console.log('[AdBlock Patch] Рекламный блок скрыт.');
        });
    }

    setInterval(scanForAds, 1000);

    /* // Закомментированный код для hideBanners
    function hideBanners() {
        // ... (код hideBanners) ...
    }
    //setInterval(hideBanners, 2000);
    // showWebViewNotification('Мониторинг запущен', 'info', true); // Тоже требуем закрытия
    */

})();
