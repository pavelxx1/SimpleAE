(function() {
    // Notification function
    function showNotificationUntilClick(message, type = 'info') {
        if (!document.body) return;
        
        const notification = document.createElement('div');
        notification.textContent = message.replace(/\\n/g, '\n');
        const baseStyles = {
            position: 'fixed',
            bottom: '20px',
            left: '50%',
            transform: 'translateX(-50%)',
            minWidth: '180px',
            maxWidth: '90%',
            padding: '12px 20px',
            color: 'white',
            borderRadius: '15px',
            boxShadow: '0 3px 8px rgba(0, 0, 0, 0.25)',
            zIndex: '10001',
            fontFamily: 'Roboto, Arial, sans-serif',
            fontSize: '15px',
            lineHeight: '1.4',
            textAlign: 'center',
            whiteSpace: 'pre-wrap',
            opacity: '0',
            transition: 'opacity 0.4s ease-in-out, bottom 0.4s ease-in-out',
            cursor: 'default'
        };
        
        let backgroundColor = '#333'; 
        let color = 'white';
        switch (type) {
            case 'success': backgroundColor = '#28a745'; break;
            case 'info':    backgroundColor = '#2eaf17'; break;
            case 'warning': backgroundColor = '#ffc107'; color = '#333'; break;
            case 'error':   backgroundColor = '#dc3545'; break;
        }
        
        baseStyles.backgroundColor = backgroundColor; 
        baseStyles.color = color;
        Object.assign(notification.style, baseStyles);
        
        let isDismissing = false;
        const dismissNotification = () => {
            if (isDismissing) return;
            isDismissing = true;
            document.removeEventListener('click', dismissNotification, { capture: true });
            document.removeEventListener('touchstart', dismissNotification, { capture: true });
            notification.style.opacity = '0';
            notification.style.bottom = '10px';
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.parentNode.removeChild(notification);
                }
            }, 400);
        };
        
        document.body.appendChild(notification);
        setTimeout(() => {
            notification.style.opacity = '1';
            notification.style.bottom = '30px';
            document.addEventListener('click', dismissNotification, { once: true, capture: true });
            document.addEventListener('touchstart', dismissNotification, { once: true, capture: true });
        }, 50);
    }

    // Use WeakSet for memory-efficient tracking of processed elements
    let processedElements = new WeakSet();
    
    function scanForAds() {
        // Consolidated selectors for common ad elements
        const selectors = [
            '[id*="ad"],[id*="Ad"],[id*="toast"]',
            '[id*="google_ads"],[id*="gpt"],[data-google-query-id]',
            'button[title*="рекл"],button[aria-label*="рекл"],button[title*="клам"]',
            '[class*="ad"],[class*="Ad"],[class*="toast"]',
            'div[class*="closeButtonWrapper"]'
        ].join(',');
        
        document.querySelectorAll(selectors).forEach(element => {
            if (processedElements.has(element)) return;
            processedElements.add(element);
            
            // Find ad container efficiently
            const container = findAdContainer(element);
            if (container) container.style.display = 'none';
        });
    }
    
    function findAdContainer(element) {
        // Check if element itself is an ad container
        if (isAdContainer(element)) return element;
        
        // Navigate up the DOM tree (maximum 5 levels)
        let current = element.parentElement;
        let level = 0;
        
        while (current && level < 5) {
            if (isAdContainer(current)) return current;
            
            // Check for height-padded style attribute (common in ad containers)
            if (current.getAttribute('style')?.includes('height-padded')) {
                return current;
            }
            
            current = current.parentElement;
            level++;
        }
        
        // Fallback: return parent at level 3 or the element itself
        current = element;
        for (let i = 0; i < 3 && current.parentElement; i++) {
            current = current.parentElement;
        }
        
        return current;
    }
    
    function isAdContainer(element) {
        // Quick check using regex patterns on common attributes
        return /ad|Ad|toast|banner|promo|charting|google/i.test(element.id || '') ||
               /ad|Ad|toast|banner|promo/i.test(element.className || '') ||
               /ad|Ad|toast/i.test(element.getAttribute('data-name') || '');
    }
    
    // Show initialization notification
    showNotificationUntilClick('AdBlocker v0.2\n@xrsrvd', 'info');
    
    // Initial scan with slight delay to allow page load
    setTimeout(scanForAds, 800);
    
    // Use requestAnimationFrame for optimal performance
    const observer = new MutationObserver(() => requestAnimationFrame(scanForAds));
    observer.observe(document.body, {
        childList: true,
        subtree: true,
        attributes: false,
        characterData: false
    });
    
    // Backup interval scan at a moderate frequency
    setInterval(scanForAds, 5000);
})();
