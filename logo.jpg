// Переменная для хранения ID интервала, чтобы его можно было остановить
let proAppearanceIntervalId = null;

// Флаги, чтобы логировать изменение только один раз
let classChangedLogged = false;
let statusChangedLogged = false;

// Модифицированная функция, которая пытается изменить вид и логирует только при успехе
function tryToSimulateProAppearanceRepeatedly() {
  let changeMade = false;

  // 1. Изменить класс на элементе <html>
  try {
    const htmlElement = document.documentElement;
    if (htmlElement && htmlElement.classList.contains('is-not-pro')) {
      htmlElement.classList.remove('is-not-pro');
      htmlElement.classList.add('is-pro');
      if (!classChangedLogged) {
        console.log("Обнаружен и заменен класс 'is-not-pro' на 'is-pro' у <html>.");
        classChangedLogged = true; // Логируем только первый раз
      }
      changeMade = true;
    }
  } catch (error) {
    // Можно добавить логирование ошибки, если нужно отлаживать
    // console.error("Ошибка при изменении класса <html>:", error);
  }

  // 2. Попытка изменить переменную статуса пользователя
  try {
    if (typeof window.user !== 'undefined' && window.user && window.user.declared_status === 'non_pro') {
      window.user.declared_status = 'pro';
       if (!statusChangedLogged) {
         console.log("Обнаружен и изменен window.user.declared_status на 'pro'.");
         statusChangedLogged = true; // Логируем только первый раз
       }
      changeMade = true;
    }
  } catch (error) {
    // Можно добавить логирование ошибки, если нужно отлаживать
    // console.error("Ошибка при изменении window.user.declared_status:", error);
  }

  // Можно добавить сюда проверки других потенциальных переменных или классов, если они известны

  // Возвращаем true, если что-то было изменено в этом вызове
  return changeMade;
}

// Функция для запуска интервала
function startProAppearanceCheck() {
  if (proAppearanceIntervalId !== null) {
    console.warn("Проверка уже запущена.");
    return;
  }
  console.log("Запуск постоянной проверки и попытки изменения вида на 'Pro' каждые 10 мс...");
  console.warn("ВНИМАНИЕ: Это может сильно нагрузить браузер!");
  console.warn("Для остановки введите: stopProAppearanceCheck()");

  // Сбрасываем флаги логирования при каждом новом запуске
  classChangedLogged = false;
  statusChangedLogged = false;

  proAppearanceIntervalId = setInterval(tryToSimulateProAppearanceRepeatedly, 10); // Запускаем каждые 10 мс
}

// Функция для остановки интервала
function stopProAppearanceCheck() {
  if (proAppearanceIntervalId !== null) {
    clearInterval(proAppearanceIntervalId);
    proAppearanceIntervalId = null;
    console.log("Постоянная проверка остановлена.");
  } else {
    console.log("Проверка не была запущена.");
  }
}

// --- Как использовать в консоли разработчика ---
// 1. Откройте TradingView и консоль разработчика (F12 -> Console).
// 2. Скопируйте ВЕСЬ код выше (все три функции) и вставьте в консоль. Нажмите Enter.
// 3. Чтобы ЗАПУСТИТЬ проверку, введите в консоли:
//    startProAppearanceCheck()
//    и нажмите Enter.
// 4. Чтобы ОСТАНОВИТЬ проверку (когда она больше не нужна или если браузер тормозит), введите:
//    stopProAppearanceCheck()
//    и нажмите Enter.
